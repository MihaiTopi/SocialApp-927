@model List<ServerLibraryProject.Models.Post>
@using ServerLibraryProject.Interfaces
@inject ICommentService CommentService
@inject IUserRepository UserRepository
@{
    ViewData["Title"] = "All Posts";

    int page = Context.Request.Query["page"].Count > 0 ? int.Parse(Context.Request.Query["page"]) : 1;
    int pageSize = 6;
    var pagedPosts = Model
        .OrderByDescending(p => p.Id)
        .Skip((page - 1) * pageSize)
        .Take(pageSize)
        .ToList();
    int totalPages = (int)Math.Ceiling(Model.Count / (double)pageSize);
}

<!-- Top Navigation -->
<div style="display: flex; justify-content: space-between; align-items: center; background-color: #2f333a; padding: 15px 30px; color: white; font-family: sans-serif;">
    <!-- Home Button -->
    <a href="/posts" style="text-decoration: none; color: #00ADB5; font-size: 1.2em;">Home</a>

    <!-- Create Post Button -->
    <a href="/posts/create" class="btn btn-primary" style="background-color: #00ADB5; border: none; border-radius: 6px; padding: 8px 20px; font-weight: bold; color: white; text-decoration: none;">
        + Create Post
    </a>

    <!-- Groups Button -->
    <a href="/groups" style="text-decoration: none; color: #00ADB5; font-size: 1.2em;">Groups</a>
</div>

<div style="display: flex; justify-content: center; margin-top: 30px; font-family: sans-serif;">
    <div style="width: 600px;">

        @foreach (var post in pagedPosts)
        {
            var tagColor = post.Tag switch
            {
                ServerLibraryProject.Enums.PostTag.Food => "#FFA500",     // Orange
                ServerLibraryProject.Enums.PostTag.Workout => "#90EE90", // LightGreen
                _ => "#393e46" // Default dark gray
            };

            // Get comments for this post
            var comments = CommentService.GetCommentsByPostId(post.Id);

            // Get post author username
            var postAuthor = UserRepository.GetById(post.UserId);

            <div style="background-color: @tagColor; padding: 15px 20px; border-radius: 10px; margin-bottom: 20px; color: black; position: relative;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h4 style="margin: 0;">@postAuthor.Username</h4>
                    <span style="background-color: white; padding: 2px 10px; border-radius: 12px; margin-right: 25px; font-size: 0.8em;">@post.Visibility</span>
                </div>

                <p style="margin: 10px 0; background-color: #f5f5f5; padding: 10px; border-radius: 6px;">@post.Content</p>

                <!-- Reactions (Buttons) -->
                <div style="display: flex; gap: 15px; font-size: 1.2em; align-items: center; margin-top: 10px;">
                    <button type="button" title="Like" style="background: none; border: none; cursor: pointer;">
                        👍 <span>0</span>
                    </button>
                    <button type="button" title="Love" style="background: none; border: none; cursor: pointer;">
                        ❤️ <span>0</span>
                    </button>
                    <button type="button" title="Laugh" style="background: none; border: none; cursor: pointer;">
                        😂 <span>0</span>
                    </button>
                    <button type="button" title="Angry" style="background: none; border: none; cursor: pointer;">
                        😡 <span>0</span>
                    </button>

                    <!-- Comment Button with Emoji -->
                    <button type="button"
                            onclick="toggleComments('comments-@post.Id')"
                            title="Comments"
                            style="background: none; border: none; cursor: pointer; margin-left: auto;">
                        💬 <span>@comments.Count</span>
                    </button>
                </div>

                <!-- Created Date -->
                <div style="display: flex; align-items: center; margin-top: 10px; font-size: 0.8em;">
                    <span style="color: #333;">
                        @($"{(DateTime.UtcNow - post.CreatedDate).Days} days ago")
                    </span>
                </div>

                <!-- Comments Dropdown Section - Hidden by Default -->
                <div id="comments-@post.Id" class="comments-dropdown" style="display: none; margin-top: 15px;">
                    <div style="background-color: white; border-radius: 8px; padding: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">
                        <!-- Comments List -->
                        <div style="max-height: 200px; overflow-y: auto; margin-bottom: 10px;">
                            @if (comments.Any())
                            {
                                @foreach (var comment in comments)
                                {
                                    // Get comment author username
                                    var commentAuthor = UserRepository.GetById(comment.UserId);

                                    <div style="padding: 8px; border-bottom: 1px solid #eee; font-size: 0.9em;">
                                        <div style="font-weight: bold;">@commentAuthor.Username</div>
                                        <div>@comment.Content</div>
                                        <div style="font-size: 0.8em; color: #777;">
                                            @comment.CreatedDate.ToString("MMM dd, yyyy hh:mm tt")
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div style="padding: 10px; text-align: center; color: #777;">No comments yet</div>
                            }
                        </div>

                        <!-- Comment Input Form -->
                        <form action="/comments/create" method="post" class="comment-form">
                            <input type="hidden" name="PostId" value="@post.Id" />
                            @{
                                // Get the current user ID from session
                                var currentUserIdString = Context.Session.GetString("UserId");
                                var currentUsername = "You";
                                if (!string.IsNullOrEmpty(currentUserIdString) && long.TryParse(currentUserIdString, out long currentUserId))
                                {
                                    try
                                    {
                                        var currentUser = UserRepository.GetById(currentUserId);
                                        currentUsername = currentUser.Username;
                                    }
                                    catch { }
                                }
                            }
                            <input type="hidden" name="CurrentUsername" value="@currentUsername" />
                            <div style="display: flex;">
                                <input type="text"
                                       name="Content"
                                       placeholder="Add a comment..."
                                       required
                                       style="flex-grow: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 5px;" />
                                <button type="submit"
                                        style="background-color: #00ADB5; border: none; color: white; padding: 8px 15px; border-radius: 4px; cursor: pointer;">
                                    Post
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Profile Icon -->
                <div style="position: absolute; top: 10px; right: 10px;">
                    <span style="background-color: white; border-radius: 50%; width: 28px; height: 28px; display: inline-block; text-align: center; line-height: 28px;">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
            </div>
        }

        <!-- Pagination Controls -->
        <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
            @if (page > 1)
            {
                <a class="btn btn-secondary" href="?page=@(page - 1)">Previous</a>
            }
            @if (page < totalPages)
            {
                <a class="btn btn-secondary" href="?page=@(page + 1)">Next</a>
            }
        </div>
    </div>
</div>

<script>
    function toggleComments(commentsId) {
        var commentsSection = document.getElementById(commentsId);
        if (commentsSection.style.display === "none") {
            commentsSection.style.display = "block";
        } else {
            commentsSection.style.display = "none";
        }
    }

    // Handle comment form submission with AJAX to prevent page refresh
    document.addEventListener('DOMContentLoaded', function() {
        const commentForms = document.querySelectorAll('.comment-form');

        commentForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();

                const postId = form.querySelector('input[name="PostId"]').value;
                const content = form.querySelector('input[name="Content"]').value;
                const commentsContainer = form.closest('.comments-dropdown').querySelector('div[style*="overflow-y: auto"]');

                if (!content.trim()) {
                    return; // Don't submit empty comments
                }

                fetch('/comments/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `PostId=${postId}&Content=${encodeURIComponent(content)}`
                })
                .then(response => {
                    if (response.ok) {
                        // Clear the input field
                        form.querySelector('input[name="Content"]').value = '';

                        const username = form.querySelector('input[name="CurrentUsername"]').value;

                        const now = new Date();
                        const formattedDate = now.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                        });

                        // Create new comment element
                        const newComment = document.createElement('div');
                        newComment.style.padding = '8px';
                        newComment.style.borderBottom = '1px solid #eee';
                        newComment.style.fontSize = '0.9em';

                        newComment.innerHTML = `
                            <div style="font-weight: bold;">${username}</div>
                            <div>${content}</div>
                            <div style="font-size: 0.8em; color: #777;">${formattedDate}</div>
                        `;

                        // If "No comments yet" message exists, remove it
                        const noCommentsMsg = commentsContainer.querySelector('div[style*="text-align: center"]');
                        if (noCommentsMsg) {
                            noCommentsMsg.remove();
                        }

                        // Add the new comment to the list
                        commentsContainer.appendChild(newComment);

                        // Update the comment count in the button
                        const commentButton = document.querySelector(`button[onclick="toggleComments('comments-${postId}')"] span`);
                        const currentCount = parseInt(commentButton.textContent);
                        commentButton.textContent = currentCount + 1;

                        // Scroll to the bottom of the comments list to see the new comment
                        commentsContainer.scrollTop = commentsContainer.scrollHeight;
                    } else {
                        alert('Error posting comment. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error posting comment. Please try again.');
                });
            });
        });
    });
</script>
