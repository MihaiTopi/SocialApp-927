@model List<ServerLibraryProject.Models.Post>
@using ServerLibraryProject.Models
@using ServerLibraryProject.Enums
@inject ServerLibraryProject.Interfaces.IReactionRepository ReactionRepository
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "All Posts";

    int page = Context.Request.Query["page"].Count > 0 ? int.Parse(Context.Request.Query["page"]) : 1;
    int pageSize = 6;
    var pagedPosts = Model
        .OrderByDescending(p => p.Id)
        .Skip((page - 1) * pageSize)
        .Take(pageSize)
        .ToList();
    int totalPages = (int)Math.Ceiling(Model.Count / (double)pageSize);

    string? userIdString = HttpContextAccessor.HttpContext?.Session.GetString("UserId");
    long userId = 0;
    long.TryParse(userIdString, out userId);
}

@Html.AntiForgeryToken()

<!-- Top Navigation -->
<div style="display: flex; justify-content: space-between; align-items: center; background-color: #2f333a; padding: 15px 30px; color: white; font-family: sans-serif;">
    <a href="/posts" style="text-decoration: none; color: #00ADB5; font-size: 1.2em;">Home</a>
    <a href="/posts/create" class="btn btn-primary" style="background-color: #00ADB5; border: none; border-radius: 6px; padding: 8px 20px; font-weight: bold; color: white; text-decoration: none;">
        + Create Post
    </a>
    <a href="/groups" style="text-decoration: none; color: #00ADB5; font-size: 1.2em;">Groups</a>
</div>

<div style="display: flex; justify-content: center; margin-top: 30px; font-family: sans-serif;">
    <div style="width: 600px;">

        @foreach (var post in pagedPosts)
        {
            var tagColor = post.Tag switch
            {
                PostTag.Food => "#FFA500",
                PostTag.Workout => "#90EE90",
                _ => "#393e46"
            };

            var reactions = ReactionRepository.GetReactionsByPostId(post.Id);
            int likeCount = reactions.Count(r => r.Type == ReactionType.Like);
            int loveCount = reactions.Count(r => r.Type == ReactionType.Love);
            int laughCount = reactions.Count(r => r.Type == ReactionType.Laugh);
            int angerCount = reactions.Count(r => r.Type == ReactionType.Anger);

            var userReaction = ReactionRepository.GetReaction(userId, post.Id);
            <div style="background-color: @tagColor; padding: 15px 20px; border-radius: 10px; margin-bottom: 20px; color: black; position: relative;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h4 style="margin: 0;">Post #@post.Id</h4>
                    <span style="background-color: white; padding: 2px 10px; border-radius: 12px; margin-right: 25px; font-size: 0.8em;">@post.Visibility</span>
                </div>

                <p style="margin: 10px 0; background-color: #f5f5f5; padding: 10px; border-radius: 6px;">@post.Content</p>

                <!-- Reactions (AJAX Buttons) -->
                <div style="display: flex; gap: 15px; font-size: 1.2em; align-items: center; margin-top: 10px;">
                    <button class="react-btn" data-post="@post.Id" data-type="Like" style="background: none; border: none; cursor: pointer;@(userReaction?.Type == ReactionType.Like ? " font-weight:bold;" : "")">
                        👍 <span id="like-@post.Id">@likeCount</span>
                    </button>
                    <button class="react-btn" data-post="@post.Id" data-type="Love" style="background: none; border: none; cursor: pointer;@(userReaction?.Type == ReactionType.Love ? " font-weight:bold;" : "")">
                        ❤️ <span id="love-@post.Id">@loveCount</span>
                    </button>
                    <button class="react-btn" data-post="@post.Id" data-type="Laugh" style="background: none; border: none; cursor: pointer;@(userReaction?.Type == ReactionType.Laugh ? " font-weight:bold;" : "")">
                        😂 <span id="laugh-@post.Id">@laughCount</span>
                    </button>
                    <button class="react-btn" data-post="@post.Id" data-type="Anger" style="background: none; border: none; cursor: pointer;@(userReaction?.Type == ReactionType.Anger ? " font-weight:bold;" : "")">
                        😡 <span id="anger-@post.Id">@angerCount</span>
                    </button>
                </div>

                <!-- Created Date + Comments Button -->
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 10px; font-size: 0.8em;">
                    <span style="color: #333;">
                        @($"{(DateTime.UtcNow - post.CreatedDate).Days} days ago")
                    </span>
                    <a href="/comments/create" class="btn btn-outline-secondary mx-2">Leave a Comment</a>
                </div>

                <!-- Profile Icon -->
                <div style="position: absolute; top: 10px; right: 10px;">
                    <span style="background-color: white; border-radius: 50%; width: 28px; height: 28px; display: inline-block; text-align: center; line-height: 28px;">
                        <i class="fa fa-user"></i>
                    </span>
                </div>
            </div>
        }

        <!-- Pagination Controls -->
        <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
            @if (page > 1)
            {
                <a class="btn btn-secondary" href="?page=@(page - 1)">Previous</a>
            }
            @if (page < totalPages)
            {
                <a class="btn btn-secondary" href="?page=@(page + 1)">Next</a>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.react-btn').forEach(btn => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const postId = this.getAttribute('data-post');
                const type = this.getAttribute('data-type');
                fetch('/posts/react', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: `postId=${postId}&type=${type}`
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById(`like-${postId}`).textContent = data.like;
                        document.getElementById(`love-${postId}`).textContent = data.love;
                        document.getElementById(`laugh-${postId}`).textContent = data.laugh;
                        document.getElementById(`anger-${postId}`).textContent = data.anger;

                        // Update button styles
                        document.querySelectorAll(`.react-btn[data-post="${postId}"]`).forEach(btn => {
                            btn.style.fontWeight = 'normal';
                        });
                        if (data[type.toLowerCase()] > 0) {
                            this.style.fontWeight = 'bold';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
        });
    </script>
}